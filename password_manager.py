from cryptography.fernet import Fernet      # module allowing us to encript text

'''def write_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:   # wb is mode, means write in byte # object here we ware using is key_file for writing in the file key.key
        key_file.write(key)  '''                 # writing the key which was generated by key=fernet.generate_key

def load_key():
    file = open("key.key", "rb")    # rb is mode to read and we are using for storing encrypted code in key variable
    key = file.read()                               
    file.close()                        #closing the file
    return key                              # so the whole method just returns encrypted code as variable key


key = load_key()      #loading the load_key method which outputs ecrypted code to key variable 
fer = Fernet(key)

#key + password + text to encrypt = random text 
#random text + key + password = text to encrypt


def view():                                                       ## defining the function by def and the name of the function is view,
        with open("passwords.txt", "r") as f:                      #r is for read mode no writing 
            for line in f.readlines():                              ## () are also important and : is also important
                data = (line.rstrip())                 #.split will take a string and look for "|" and split string to bunch of different items
                user, passw = data.split("|")           #thats why two new variables to store 2 contents whicha re  divided by | from line string 
                print("user:", user,"| password:", fer.decrypt(passw.encode()).decode())   #first decrypt the passw then decode back into string
#since .txt file has characters f.readlins() will read and return them as strings and the variable creatd will be filled with strings 
# .rstrip will not allow to create new line after the view is runed. strip off carrage return

# b'hello'    is byte string different from 'hello'. so byte string cannot be in passwords.txt

def add():                                                                  ## functions as in java, can be called infnite times an
    name = input("Account Name: ")                                          ## and also when called the code in it is executed 
    pwd = input("password: ")

    with open("passwords.txt", "a") as f:                      # with keyword is used to open and automaticly close file after the code runs 
        f.write(name + "|" + fer.encrypt(pwd.encode()).decode() + "\n")         # \n (carrage return) for new line after executing   # name of the file is "passwords.txt" and a is the mode to open the file 
#      #other modes w(write) overwrite a file, create if the file does not exist , decode is going to convert byte string into normal string
#      # fer.encrypt(pwd.encode) || fer.encrypt for encryting, encode for converting pwd to byte format, str for converting the whole thing into string
#        a is the pend mode.used to read entire file  and write from the end of the existing file, create if the file does not exist
#usually file.close() used for closing and file = open() for opening
#as f: The as keyword assigns the opened file object to the variable f. This allows you to interact with the file using f
while True:
    mode = input("Would you like to add a new password or view existing ones (view, add)?, press q to quit? ").lower()
    if mode == "q":
        break                                                           ## goin to break while loop if they type in q 

    if mode == "view":
        view()                                          ## pass is keyword does nothing,use for not getting indentaion errors
    elif mode == "add":
        add()
    else:
        print("Invalid mode.")
        continue                                                        ##this will bring to start of the while loop
